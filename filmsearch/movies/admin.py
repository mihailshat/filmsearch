from django.contrib import admin, messages
from django.db.models import Count, Avg
from django.utils.html import format_html, mark_safe
from django.urls import reverse
from django.http import HttpResponseRedirect, HttpResponse
from django.template.loader import render_to_string
from django.contrib.admin.views.decorators import staff_member_required
from django.conf import settings
import weasyprint
from .models import (
    Genre, ActorDirector, MovieTVShow, MovieTVShowActorDirector,
    Collection, CollectionItem, UserProfile, UserGenrePreference, Recommendation,
    Rating, Review, ReviewVote, UserWatchlist
)
from django.utils import timezone


class MovieTVShowInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–æ–≤"""
    model = MovieTVShow.genres.through
    extra = 0
    verbose_name = '–§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª'
    verbose_name_plural = '–§–∏–ª—å–º—ã/–°–µ—Ä–∏–∞–ª—ã'
    raw_id_fields = ('movietvshow',)
    readonly_fields = ('get_title', 'get_type', 'get_release_date')
    
    def get_title(self, obj):
        return obj.movietvshow.title
    get_title.short_description = '–ù–∞–∑–≤–∞–Ω–∏–µ'
    
    def get_type(self, obj):
        return obj.movietvshow.get_type_display()
    get_type.short_description = '–¢–∏–ø'
    
    def get_release_date(self, obj):
        return obj.movietvshow.release_date
    get_release_date.short_description = '–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞'
    
    def has_add_permission(self, request, obj=None):
        return False


@admin.register(Genre)
class GenreAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ Genre"""
    list_display = ('name', 'movies_count', 'show_movies_link')
    search_fields = ('name', 'description')
    list_per_page = 20
    inlines = [MovieTVShowInline]
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        qs = qs.annotate(movies_count_val=Count('movies'))
        return qs
    
    @admin.display(description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤', ordering='movies_count_val')
    def movies_count(self, obj):
        return obj.movies.count()
    
    @admin.display(description='–§–∏–ª—å–º—ã/–°–µ—Ä–∏–∞–ª—ã')
    def show_movies_link(self, obj):
        url = reverse('admin:movies_movietvshow_changelist') + f'?genres__id__exact={obj.id}'
        return format_html('<a href="{}">–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã</a>', url)


class MovieTVShowActorDirectorInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤ —Ñ–∏–ª—å–º–∞—Ö/—Å–µ—Ä–∏–∞–ª–∞—Ö"""
    model = MovieTVShowActorDirector
    extra = 0
    verbose_name = '–†–æ–ª—å –≤ —Ñ–∏–ª—å–º–µ/—Å–µ—Ä–∏–∞–ª–µ'
    verbose_name_plural = '–†–æ–ª–∏ –≤ —Ñ–∏–ª—å–º–∞—Ö/—Å–µ—Ä–∏–∞–ª–∞—Ö'
    raw_id_fields = ('movie_tvshow',)
    readonly_fields = ('get_movie_title', 'get_movie_type', 'get_release_date')
    fields = ('movie_tvshow', 'get_movie_title', 'get_movie_type', 'get_release_date', 'role', 'character_name')
    
    def get_movie_title(self, obj):
        return obj.movie_tvshow.title if obj.movie_tvshow else '-'
    get_movie_title.short_description = '–ù–∞–∑–≤–∞–Ω–∏–µ'
    
    def get_movie_type(self, obj):
        return obj.movie_tvshow.get_type_display() if obj.movie_tvshow else '-'
    get_movie_type.short_description = '–¢–∏–ø'
    
    def get_release_date(self, obj):
        return obj.movie_tvshow.release_date if obj.movie_tvshow else '-'
    get_release_date.short_description = '–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞'


@admin.register(ActorDirector)
class ActorDirectorAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ ActorDirector"""
    list_display = ('full_name', 'birth_date', 'photo_display', 'resume_display', 'has_photo_file', 'has_resume_file', 'movies_count', 'show_movies_link')
    list_filter = ('birth_date', 'movie_roles__role')
    search_fields = ('full_name', 'biography')
    readonly_fields = ('photo_preview', 'photo_full', 'photo_file_preview', 'resume_file_info')
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('full_name', 'birth_date', 'biography'),
        }),
        ('–§–æ—Ç–æ (URL)', {
            'fields': ('photo_url', 'photo_preview'),
            'classes': ('collapse',),
        }),
        ('–§–æ—Ç–æ (—Ñ–∞–π–ª)', {
            'fields': ('photo_image', 'photo_file_preview'),
        }),
        ('–†–µ–∑—é–º–µ/–ë–∏–æ–≥—Ä–∞—Ñ–∏—è (—Ñ–∞–π–ª)', {
            'fields': ('resume_file', 'resume_file_info'),
        }),
        ('–ü–æ–ª–Ω–æ–µ —Ñ–æ—Ç–æ', {
            'fields': ('photo_full',),
            'classes': ('collapse',),
        }),
    )
    inlines = [MovieTVShowActorDirectorInline]
    list_per_page = 20
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        qs = qs.annotate(movies_count_val=Count('movies'))
        return qs
    
    @admin.display(description='–§–æ—Ç–æ')
    def photo_preview(self, obj):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª—É, –∑–∞—Ç–µ–º URL)"""
        if obj.photo_image:
            return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />', obj.photo_image.url)
        elif obj.photo_url:
            return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />', obj.photo_url)
        return '-'
    
    @admin.display(description='–§–æ—Ç–æ')
    def photo_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–∫–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª—É, –∑–∞—Ç–µ–º URL)"""
        if obj.photo_image:
            return format_html('<img src="{}" width="40" height="40" style="object-fit: cover; border-radius: 4px;" title="–§–∞–π–ª: {}" />', 
                            obj.photo_image.url, obj.photo_image.name.split('/')[-1])
        elif obj.photo_url:
            return format_html('<img src="{}" width="40" height="40" style="object-fit: cover; border-radius: 4px;" title="URL" />', 
                            obj.photo_url)
        return '-'
    
    @admin.display(description='–†–µ–∑—é–º–µ')  
    def resume_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—é–º–µ –≤ —Å–ø–∏—Å–∫–µ"""
        if obj.resume_file:
            file_size_mb = obj.resume_file.size / (1024 * 1024) 
            file_name = obj.resume_file.name.split('/')[-1]
            display_name = file_name[:20] + '...' if len(file_name) > 20 else file_name
            
            return format_html(
                '<a href="{}" target="_blank" title="–†–∞–∑–º–µ—Ä: {} –ú–ë">üìÑ {}</a>', 
                obj.resume_file.url, 
                f'{file_size_mb:.1f}',  
                display_name
            )
        return '-'
    
    @admin.display(description='–ü–æ–ª–Ω–æ–µ —Ñ–æ—Ç–æ')
    def photo_full(self, obj):
        """–ü–æ–ª–Ω–æ–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª—É, –∑–∞—Ç–µ–º URL)"""
        if obj.photo_image:
            return format_html('<img src="{}" width="300" />', obj.photo_image.url)
        elif obj.photo_url:
            return format_html('<img src="{}" width="300" />', obj.photo_url)
        return '-'
    
    @admin.display(description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤', ordering='movies_count_val')
    def movies_count(self, obj):
        return obj.movies.count()
    
    @admin.display(description='–§–∏–ª—å–º—ã/–°–µ—Ä–∏–∞–ª—ã')
    def show_movies_link(self, obj):
        url = reverse('admin:movies_movietvshow_changelist') + f'?actors_directors__id__exact={obj.id}'
        return format_html('<a href="{}">–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã</a>', url)
    
    @admin.display(description='–§–æ—Ç–æ —Ñ–∞–π–ª', boolean=True)
    def has_photo_file(self, obj):
        return bool(obj.photo_image)
    
    @admin.display(description='–†–µ–∑—é–º–µ —Ñ–∞–π–ª', boolean=True)
    def has_resume_file(self, obj):
        return bool(obj.resume_file)
    
    @admin.display(description='–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ —Ñ–∞–π–ª–∞')
    def photo_file_preview(self, obj):
        if obj.photo_image:
            return format_html('<img src="{}" width="100" height="100" style="object-fit: cover;" />', obj.photo_image.url)
        return '-'
    
    @admin.display(description='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ —Ä–µ–∑—é–º–µ')
    def resume_file_info(self, obj):
        if obj.resume_file:
            file_size = obj.resume_file.size
            file_size_mb = file_size / (1024 * 1024)
            return format_html(
                '<p><strong>–§–∞–π–ª:</strong> {}<br><strong>–†–∞–∑–º–µ—Ä:</strong> {} –ú–ë<br><a href="{}" target="_blank">üìÑ –°–∫–∞—á–∞—Ç—å</a></p>',
                obj.resume_file.name.split('/')[-1],
                f'{file_size_mb:.2f}',  
                obj.resume_file.url
            )
        return '-'


class MovieTVShowGenreInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤"""
    model = MovieTVShow.genres.through
    extra = 0
    verbose_name = '–ñ–∞–Ω—Ä'
    verbose_name_plural = '–ñ–∞–Ω—Ä—ã'


class MovieTVShowActorDirectorInlineForMovie(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–µ—Ä–æ–≤/—Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤"""
    model = MovieTVShowActorDirector
    extra = 0
    verbose_name = '–ê–∫—Ç–µ—Ä/–†–µ–∂–∏—Å—Å–µ—Ä'
    verbose_name_plural = '–ê–∫—Ç–µ—Ä—ã/–†–µ–∂–∏—Å—Å–µ—Ä—ã'
    raw_id_fields = ('actor_director',)
    fields = ('actor_director', 'role', 'character_name', 'get_photo')
    readonly_fields = ('get_photo',)
    
    def get_photo(self, obj):
        if obj.actor_director:
            if obj.actor_director.photo_image:
                return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />', 
                                obj.actor_director.photo_image.url)
            elif obj.actor_director.photo_url:
                return format_html('<img src="{}" width="50" height="50" style="object-fit: cover;" />', 
                                obj.actor_director.photo_url)
        return '-'
    get_photo.short_description = '–§–æ—Ç–æ'


class RatingInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫"""
    model = Rating
    extra = 0
    verbose_name = '–û—Ü–µ–Ω–∫–∞'
    verbose_name_plural = '–û—Ü–µ–Ω–∫–∏'
    raw_id_fields = ('user',)
    readonly_fields = ('created_at',)
    fields = ('user', 'rating_value', 'created_at')


class ReviewInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
    model = Review
    extra = 0
    verbose_name = '–û—Ç–∑—ã–≤'
    verbose_name_plural = '–û—Ç–∑—ã–≤—ã'
    raw_id_fields = ('user',)
    readonly_fields = ('created_at', 'likes_count', 'dislikes_count')
    fields = ('user', 'review_text', 'likes_count', 'dislikes_count', 'created_at')


class UserWatchlistInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    model = UserWatchlist
    extra = 0
    verbose_name = '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'
    verbose_name_plural = '–°–ø–∏—Å–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'
    raw_id_fields = ('user',)
    readonly_fields = ('added_at',)
    fields = ('user', 'status', 'progress', 'added_at')


class CollectionItemInlineForMovie(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–±–æ—Ä–æ–∫ –¥–ª—è —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞"""
    model = CollectionItem
    extra = 0
    verbose_name = '–ü–æ–¥–±–æ—Ä–∫–∞'
    verbose_name_plural = '–ü–æ–¥–±–æ—Ä–∫–∏'
    raw_id_fields = ('collection',)
    readonly_fields = ('added_at', 'get_collection_type')
    fields = ('collection', 'get_collection_type', 'added_at')
    
    def get_collection_type(self, obj):
        if obj.collection and obj.collection.is_system:
            return '–°–∏—Å—Ç–µ–º–Ω–∞—è'
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è'
    get_collection_type.short_description = '–¢–∏–ø –ø–æ–¥–±–æ—Ä–∫–∏'


class CollectionItemInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥–±–æ—Ä–∫–∏"""
    model = CollectionItem
    extra = 0
    verbose_name = '–§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª'
    verbose_name_plural = '–§–∏–ª—å–º—ã/–°–µ—Ä–∏–∞–ª—ã'
    raw_id_fields = ('movie_tvshow',)
    readonly_fields = ('added_at', 'get_movie_type', 'get_rating', 'get_poster')
    fields = ('movie_tvshow', 'get_movie_type', 'get_rating', 'get_poster', 'added_at')
    
    def get_movie_type(self, obj):
        return obj.movie_tvshow.get_type_display() if obj.movie_tvshow else '-'
    get_movie_type.short_description = '–¢–∏–ø'
    
    def get_rating(self, obj):
        if hasattr(obj.movie_tvshow, 'average_rating'):
            avg = obj.movie_tvshow.average_rating
            if avg > 0:
                return f"{avg:.1f}/10"
        return '-'
    get_rating.short_description = '–†–µ–π—Ç–∏–Ω–≥'
    
    def get_poster(self, obj):
        if obj.movie_tvshow:
            if obj.movie_tvshow.poster_image:
                return format_html('<img src="{}" width="50" height="70" style="object-fit: cover;" />', 
                                obj.movie_tvshow.poster_image.url)
            elif obj.movie_tvshow.poster_url:
                return format_html('<img src="{}" width="50" height="70" style="object-fit: cover;" />', 
                                obj.movie_tvshow.poster_url)
        return '-'
    get_poster.short_description = '–ü–æ—Å—Ç–µ—Ä'


@admin.register(Collection)
class CollectionAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ Collection"""
    list_display = ('title', 'get_user_display', 'is_system', 'is_public', 'created_at', 'items_count', 'show_items_link')
    list_filter = ('is_system', 'is_public', 'created_at')
    search_fields = ('title', 'description', 'user__username')
    raw_id_fields = ('user',)
    inlines = [CollectionItemInline]
    readonly_fields = ('created_at', 'updated_at')
    list_per_page = 20
    
    def get_fieldsets(self, request, obj=None):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–±–æ—Ä–∫–∏"""
        if obj and obj.is_system:
            # —Å–∏—Å—Ç–µ–º–Ω–∞—è - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ–≥–¥–∞ –ø—É–±–ª–∏—á–Ω—ã
            return (
                ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
                    'fields': ('title', 'description', 'is_system')
                }),
                ('–î–∞—Ç—ã', {
                    'fields': ('created_at', 'updated_at'),
                    'classes': ('collapse',),
                }),
            )
        else:
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—ë
            return (
                ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
                    'fields': ('title', 'user', 'description')
                }),
                ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
                    'fields': ('is_system', 'is_public')
                }),
                ('–î–∞—Ç—ã', {
                    'fields': ('created_at', 'updated_at'),
                    'classes': ('collapse',),
                }),
            )
    
    def get_readonly_fields(self, request, obj=None):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        readonly_fields = list(self.readonly_fields)
        if obj and obj.is_system:
            # —Å–∏—Å—Ç–µ–º–Ω–∞—è - –ø–æ–ª–µ –ø—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            readonly_fields.append('is_public')
        return readonly_fields
    
    def add_view(self, request, form_url='', extra_context=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–±–æ—Ä–∫–∏"""
        extra_context = extra_context or {}
        extra_context['show_save_and_add_another'] = False  
        extra_context['title'] = '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É'
        return super().add_view(request, form_url, extra_context)
    
    def change_view(self, request, object_id, form_url='', extra_context=None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–±–æ—Ä–∫–∏"""
        extra_context = extra_context or {}
        obj = self.get_object(request, object_id)
        if obj and obj.is_system:
            extra_context['title'] = f'–°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞: {obj.title}'
        return super().change_view(request, object_id, form_url, extra_context)
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        qs = qs.annotate(items_count_val=Count('items'))
        return qs
    
    @admin.display(description='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    def get_user_display(self, obj):
        if obj.is_system:
            return '-'
        elif obj.user:
            return obj.user.username
        return '–ù–µ —É–∫–∞–∑–∞–Ω'
    
    @admin.display(description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', ordering='items_count_val')
    def items_count(self, obj):
        return obj.get_items_count()
    
    @admin.display(description='–§–∏–ª—å–º—ã/–°–µ—Ä–∏–∞–ª—ã')
    def show_items_link(self, obj):
        url = reverse('admin:movies_movietvshow_changelist') + f'?collections__id__exact={obj.id}'
        return format_html('<a href="{}">–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã</a>', url)
    
    def save_model(self, request, obj, form, change):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π"""
        if obj.is_system:
            obj.is_public = True
            obj.user = None
        super().save_model(request, obj, form, change)


@admin.register(CollectionItem)
class CollectionItemAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ CollectionItem"""
    list_display = ('movie_tvshow', 'get_movie_type', 'collection', 'get_collection_type', 'added_at')
    list_filter = ('added_at', 'collection__is_system', 'movie_tvshow__type')
    search_fields = ('movie_tvshow__title', 'collection__title')
    raw_id_fields = ('movie_tvshow', 'collection')
    date_hierarchy = 'added_at'
    readonly_fields = ('added_at',)
    list_per_page = 30
    
    def get_movie_type(self, obj):
        return obj.movie_tvshow.get_type_display() if obj.movie_tvshow else '-'
    get_movie_type.short_description = '–¢–∏–ø'
    
    def get_collection_type(self, obj):
        if obj.collection and obj.collection.is_system:
            return '–°–∏—Å—Ç–µ–º–Ω–∞—è'
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è'
    get_collection_type.short_description = '–¢–∏–ø –ø–æ–¥–±–æ—Ä–∫–∏'


class PreferredGenresInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –∂–∞–Ω—Ä–æ–≤"""
    model = UserProfile.preferred_genres.through
    extra = 0
    verbose_name = '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∂–∞–Ω—Ä'
    verbose_name_plural = '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∂–∞–Ω—Ä—ã'


@admin.register(UserProfile)
class UserProfileAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ UserProfile"""
    list_display = ('user', 'get_preferred_genres', 'created_at', 'updated_at')
    filter_horizontal = ('preferred_genres',)
    raw_id_fields = ('user',)
    search_fields = ('user__username',)
    readonly_fields = ('created_at', 'updated_at')
    exclude = ('preferred_genres',)
    inlines = [PreferredGenresInline]
    
    @admin.display(description='–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∂–∞–Ω—Ä—ã')
    def get_preferred_genres(self, obj):
        genres = [genre.name for genre in obj.preferred_genres.all()[:5]]
        if len(genres) > 0:
            return ', '.join(genres)
        return '–ù–µ —É–∫–∞–∑–∞–Ω—ã'


@admin.register(UserGenrePreference)
class UserGenrePreferenceAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –º–æ–¥–µ–ª–∏ UserGenrePreference"""
    list_display = ('user', 'genre')
    list_filter = ('genre',)
    search_fields = ('user__username', 'genre__name')
    raw_id_fields = ('user',)


@admin.register(Recommendation)
class RecommendationAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ Recommendation"""
    list_display = ('user', 'movie_tvshow', 'get_movie_type', 'get_genres', 'reason_code', 'created_at')
    list_filter = ('created_at', 'reason_code', 'movie_tvshow__type', 'movie_tvshow__genres')
    search_fields = ('user__username', 'movie_tvshow__title')
    raw_id_fields = ('user', 'movie_tvshow')
    date_hierarchy = 'created_at'
    readonly_fields = ('created_at',)
    list_per_page = 20
    
    def get_movie_type(self, obj):
        return obj.movie_tvshow.get_type_display() if obj.movie_tvshow else '-'
    get_movie_type.short_description = '–¢–∏–ø'
    
    def get_genres(self, obj):
        if obj.movie_tvshow:
            genres = [genre.name for genre in obj.movie_tvshow.genres.all()[:3]]
            if len(genres) > 0:
                return ', '.join(genres)
        return '-'
    get_genres.short_description = '–ñ–∞–Ω—Ä—ã'


@admin.register(Rating)
class RatingAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ Rating"""
    list_display = ('user', 'movie_tvshow', 'get_movie_type', 'rating_value', 'created_at')
    list_filter = ('rating_value', 'created_at', 'movie_tvshow__type')
    search_fields = ('user__username', 'movie_tvshow__title')
    raw_id_fields = ('user', 'movie_tvshow')
    date_hierarchy = 'created_at'
    readonly_fields = ('created_at',)
    list_per_page = 20
    
    def get_movie_type(self, obj):
        return obj.movie_tvshow.get_type_display() if obj.movie_tvshow else '-'
    get_movie_type.short_description = '–¢–∏–ø'


class ReviewVoteInline(admin.TabularInline):
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –æ—Ç–∑—ã–≤–æ–≤"""
    model = ReviewVote
    extra = 0
    verbose_name = '–û—Ü–µ–Ω–∫–∞ –æ—Ç–∑—ã–≤–∞'
    verbose_name_plural = '–û—Ü–µ–Ω–∫–∏ –æ—Ç–∑—ã–≤–∞'
    raw_id_fields = ('user',)
    readonly_fields = ('voted_at',)


@admin.register(Review)
class ReviewAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ Review"""
    list_display = ('user', 'movie_tvshow', 'get_movie_type', 'short_text', 
                'moderation_status', 'moderated_by', 'created_at', 'likes_count', 'dislikes_count', 'rating_percent')
    list_filter = ('moderation_status', 'created_at', 'movie_tvshow__type', 'moderated_by')
    search_fields = ('user__username', 'movie_tvshow__title', 'review_text')
    raw_id_fields = ('user', 'movie_tvshow', 'moderated_by')
    date_hierarchy = 'created_at'
    readonly_fields = ('created_at', 'likes_count', 'dislikes_count', 'moderated_at')
    inlines = [ReviewVoteInline]
    list_per_page = 20
    actions = ['approve_reviews', 'reject_reviews']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user', 'movie_tvshow', 'review_text')
        }),
        ('–ú–æ–¥–µ—Ä–∞—Ü–∏—è', {
            'fields': ('moderation_status', 'moderated_by', 'moderated_at', 'rejection_reason')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('likes_count', 'dislikes_count')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('created_at',),
            'classes': ('collapse',),
        }),
    )
    
    def get_movie_type(self, obj):
        return obj.movie_tvshow.get_type_display() if obj.movie_tvshow else '-'
    get_movie_type.short_description = '–¢–∏–ø'
    
    @admin.display(description='–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞')
    def short_text(self, obj):
        if len(obj.review_text) > 50:
            return obj.review_text[:50] + '...'
        return obj.review_text
    
    @admin.display(description='–õ–∞–π–∫–∏')
    def likes_count(self, obj):
        return obj.get_likes_count()
    
    @admin.display(description='–î–∏–∑–ª–∞–π–∫–∏')
    def dislikes_count(self, obj):
        return obj.get_dislikes_count()
    
    @admin.display(description='–†–µ–π—Ç–∏–Ω–≥ (%)')
    def rating_percent(self, obj):
        rating = obj.get_rating()
        return format_html('<span style="color: #{};">{}%</span>', 
                        self.get_rating_color(rating), f'{rating:.1f}')
    
    def get_rating_color(self, rating):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        if rating >= 80:
            return '2e7d32'  # –∑–µ–ª–µ–Ω—ã–π
        elif rating >= 60:
            return '1976d2'  # —Å–∏–Ω–∏–π
        elif rating >= 40:
            return 'ffa000'  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            return 'c62828'  # –∫—Ä–∞—Å–Ω—ã–π
    
    @admin.action(description='–û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã')
    def approve_reviews(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
        updated = 0
        for review in queryset:
            if review.moderation_status != 'approved':
                review.approve(request.user)
                updated += 1
        
        self.message_user(
            request,
            f'–û–¥–æ–±—Ä–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {updated}',
            messages.SUCCESS
        )
    
    @admin.action(description='–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã')
    def reject_reviews(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
        updated = 0
        for review in queryset:
            if review.moderation_status != 'rejected':
                review.reject(request.user, '–ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
                updated += 1
        
        self.message_user(
            request,
            f'–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {updated}',
            messages.WARNING
        )


@admin.register(ReviewVote)
class ReviewVoteAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ ReviewVote"""
    list_display = ('user', 'review', 'get_review_movie', 'vote_type', 'voted_at')
    list_filter = ('vote_type', 'voted_at')
    search_fields = ('user__username', 'review__review_text', 'review__movie_tvshow__title')
    raw_id_fields = ('user', 'review')
    date_hierarchy = 'voted_at'
    readonly_fields = ('voted_at',)
    list_per_page = 20
    
    def get_review_movie(self, obj):
        if obj.review and obj.review.movie_tvshow:
            return obj.review.movie_tvshow.title
        return '-'
    get_review_movie.short_description = '–§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª'


@admin.register(UserWatchlist)
class UserWatchlistAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ UserWatchlist"""
    list_display = ('user', 'movie_tvshow', 'get_movie_type', 'status', 'progress', 'added_at')
    list_filter = ('status', 'added_at', 'movie_tvshow__type')
    search_fields = ('user__username', 'movie_tvshow__title')
    raw_id_fields = ('user', 'movie_tvshow')
    date_hierarchy = 'added_at'
    readonly_fields = ('added_at',)
    list_per_page = 20
    
    def get_movie_type(self, obj):
        return obj.movie_tvshow.get_type_display() if obj.movie_tvshow else '-'
    get_movie_type.short_description = '–¢–∏–ø'


@admin.register(MovieTVShow)
class MovieTVShowAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –º–æ–¥–µ–ª–∏ MovieTVShow"""
    list_display = ('title', 'type', 'poster_display', 'release_date', 'status', 'get_genres_display', 
                'country', 'average_rating_display', 'ratings_count', 'reviews_count', 
                'movie_pdf_report')
    list_filter = ('type', 'status', 'release_date', 'genres', 'country', 'age_restriction')
    search_fields = ('title', 'description', 'country')
    date_hierarchy = 'release_date'
    readonly_fields = ('created_at', 'updated_at', 'average_rating_display', 'poster_preview', 
                    'poster_large', 'poster_file_preview', 'ratings_count', 'reviews_count')
    filter_horizontal = ('genres',)
    list_display_links = ('title',)
    list_per_page = 20
    actions = ['generate_movies_summary_pdf', 'mark_as_finished', 'mark_as_ongoing']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'description', 'type', 'release_date', 'age_restriction', 'country')
        }),
        ('–ü–æ—Å—Ç–µ—Ä (URL)', {
            'fields': ('poster_url', 'poster_preview'),
            'classes': ('collapse',),
        }),
        ('–ü–æ—Å—Ç–µ—Ä (—Ñ–∞–π–ª)', {
            'fields': ('poster_image', 'poster_file_preview'),
        }),
        ('–ú–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('poster_large',),
            'classes': ('collapse',),
        }),
        ('–î–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞', {
            'fields': ('duration',),
            'classes': ('collapse',),
        }),
        ('–î–µ—Ç–∞–ª–∏ —Å–µ—Ä–∏–∞–ª–∞', {
            'fields': ('seasons_count', 'episodes_count', 'end_date', 'status'),
            'classes': ('collapse',),
        }),
        ('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', {
            'fields': ('genres',),
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('average_rating_display', 'ratings_count', 'reviews_count'),
            'classes': ('collapse',),
        }),
        ('–°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',),
        }),
    )
    
    inlines = [MovieTVShowActorDirectorInlineForMovie, MovieTVShowGenreInline, 
            RatingInline, ReviewInline, UserWatchlistInline, CollectionItemInlineForMovie]
    
    def get_queryset(self, request):
        return super().get_queryset(request).prefetch_related(
            'genres', 'ratings', 'reviews', 'actors_directors'
        ).annotate(
            ratings_count_val=Count('ratings', distinct=True),
            reviews_count_val=Count('reviews', distinct=True)
        )
    
    @admin.display(description='–ñ–∞–Ω—Ä—ã')
    def get_genres_display(self, obj):
        return ', '.join([genre.name for genre in obj.genres.all()[:3]])
    
    @admin.display(description='–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')
    def average_rating_display(self, obj):
        avg = obj.average_rating
        if avg > 0:
            return format_html('<span style="color: #{};">{}/10</span>', 
                            self.get_rating_color(avg), f'{avg:.1f}')
        return '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'
    
    def get_rating_color(self, rating):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        if rating >= 8:
            return '2e7d32'  # –∑–µ–ª–µ–Ω—ã–π
        elif rating >= 6:
            return '1976d2'  # —Å–∏–Ω–∏–π
        elif rating >= 4:
            return 'ffa000'  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
        else:
            return 'c62828'  # –∫—Ä–∞—Å–Ω—ã–π
    
    @admin.display(description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫', ordering='ratings_count_val')
    def ratings_count(self, obj):
        return obj.ratings.count()
    
    @admin.display(description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤', ordering='reviews_count_val')
    def reviews_count(self, obj):
        return obj.reviews.count()
    
    @admin.display(description='–ü–æ—Å—Ç–µ—Ä')
    def poster_preview(self, obj):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª—É, –∑–∞—Ç–µ–º URL)"""
        if obj.poster_image:
            return format_html('<img src="{}" width="100" height="140" style="object-fit: cover;" />', obj.poster_image.url)
        elif obj.poster_url:
            return format_html('<img src="{}" width="100" />', obj.poster_url)
        return '-'
    
    @admin.display(description='–ü–æ—Å—Ç–µ—Ä')
    def poster_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª—É, –∑–∞—Ç–µ–º URL)"""
        if obj.poster_image:
            return format_html('<img src="{}" width="40" height="60" style="object-fit: cover; border-radius: 4px;" title="–§–∞–π–ª: {}" />', 
                             obj.poster_image.url, obj.poster_image.name.split('/')[-1])
        elif obj.poster_url:
            return format_html('<img src="{}" width="40" height="60" style="object-fit: cover; border-radius: 4px;" title="URL" />', 
                             obj.poster_url)
        return '-'
    
    @admin.display(description='–ü–æ–ª–Ω—ã–π –ø–æ—Å—Ç–µ—Ä')
    def poster_large(self, obj):
        """–ü–æ–ª–Ω—ã–π –ø–æ—Å—Ç–µ—Ä –≤ —Ñ–æ—Ä–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª—É, –∑–∞—Ç–µ–º URL)"""
        if obj.poster_image:
            return format_html('<img src="{}" width="300" />', obj.poster_image.url)
        elif obj.poster_url:
            return format_html('<img src="{}" width="300" />', obj.poster_url)
        return '-'
    
    @admin.display(description='–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–µ—Ä–∞')
    def poster_file_preview(self, obj):
        if obj.poster_image:
            return format_html('<img src="{}" width="100" height="140" style="object-fit: cover;" />', obj.poster_image.url)
        return '-'
    
    @admin.display(description='PDF –æ—Ç—á–µ—Ç')
    def movie_pdf_report(self, obj):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ PDF –æ—Ç—á–µ—Ç –æ —Ñ–∏–ª—å–º–µ"""
        url = reverse('admin_movie_pdf', args=[obj.id])
        return mark_safe(f'<a href="{url}" target="_blank">üìÑ PDF –æ—Ç—á–µ—Ç</a>')
    
    @admin.action(description='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π PDF –æ—Ç—á–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å–º–∞–º')
    def generate_movies_summary_pdf(self, request, queryset):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π PDF –æ—Ç—á–µ—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å–º–∞–º"""
        movies = queryset.select_related().prefetch_related('genres', 'reviews', 'ratings')
        
        context = {
            'movies': movies,
            'total_movies': movies.count(),
            'report_date': timezone.now(),
        }
        
        # —Ä–µ–Ω–¥–µ—Ä–∏–º HTML —à–∞–±–ª–æ–Ω
        html = render_to_string('admin/movies/movies_summary_pdf.html', context)
        
        # —Å–æ–∑–¥–∞–µ–º HTTP –æ—Ç–≤–µ—Ç —Å PDF
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = f'filename=movies_summary_report_{timezone.now().strftime("%Y%m%d_%H%M")}.pdf'
        
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ø–æ–º–æ—â—å—é WeasyPrint
        weasyprint.HTML(string=html).write_pdf(response)
        
        return response
    
    @admin.action(description='–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ')
    def mark_as_finished(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ –æ—Ç–º–µ—á–∞–µ—Ç —Å–µ—Ä–∏–∞–ª—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"""
        tv_shows = queryset.filter(type='tv_show')
        updated = tv_shows.update(status='finished')
        
        self.message_user(
            request,
            f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {updated} —Å–µ—Ä–∏–∞–ª–æ–≤',
            messages.SUCCESS
        )
    
    @admin.action(description='–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã –∫–∞–∫ –≤—ã—Ö–æ–¥—è—â–∏–µ')
    def mark_as_ongoing(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤–æ –æ—Ç–º–µ—á–∞–µ—Ç —Å–µ—Ä–∏–∞–ª—ã –∫–∞–∫ –≤—ã—Ö–æ–¥—è—â–∏–µ"""
        tv_shows = queryset.filter(type='tv_show')
        updated = tv_shows.update(status='ongoing')
        
        self.message_user(
            request,
            f'–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã—Ö–æ–¥—è—â–∏–µ: {updated} —Å–µ—Ä–∏–∞–ª–æ–≤',
            messages.SUCCESS
        )


@staff_member_required
def admin_movie_pdf(request, movie_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –æ —Ñ–∏–ª—å–º–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    from django.shortcuts import get_object_or_404
    
    movie = get_object_or_404(MovieTVShow, id=movie_id)
    
    # –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–¥–∞–Ω–Ω—ã–µ
    reviews = movie.reviews.select_related('user').order_by('-created_at')[:10]
    ratings = movie.ratings.select_related('user').order_by('-created_at')[:10]
    actors = movie.actors_directors.filter(movie_roles__role='actor')[:10]
    directors = movie.actors_directors.filter(movie_roles__role='director')[:5]
    
    context = {
        'movie': movie,
        'reviews': reviews,
        'ratings': ratings,
        'actors': actors,
        'directors': directors,
        'reviews_count': movie.reviews.count(),
        'ratings_count': movie.ratings.count(),
        'average_rating': movie.ratings.aggregate(avg=Avg('rating_value'))['avg'] or 0,
    }
    
    # —Ä–µ–Ω–¥–µ—Ä–∏–º HTML —à–∞–±–ª–æ–Ω
    html = render_to_string('admin/movies/movie_pdf_report.html', context)
    
    # —Å–æ–∑–¥–∞–µ–º HTTP –æ—Ç–≤–µ—Ç —Å PDF
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'filename=movie_report_{movie.id}_{movie.title[:20]}.pdf'
    
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ø–æ–º–æ—â—å—é WeasyPrint
    weasyprint.HTML(string=html).write_pdf(response)
    
    return response
