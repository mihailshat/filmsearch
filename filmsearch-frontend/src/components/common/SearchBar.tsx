import React, { useState } from 'react';
import { Form, Button, InputGroup } from 'react-bootstrap';
import { homepageAPI } from '../../services/api';
import { SearchParams } from '../../types/api';

const SearchBar: React.FC = () => {
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [isSearching, setIsSearching] = useState<boolean>(false);

  const handleSearch = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();
    
    if (!searchQuery.trim()) {
      return;
    }

    try {
      setIsSearching(true);
      
      const searchParams: SearchParams = {
        q: searchQuery.trim()
      };
      
      const response = await homepageAPI.searchMovies(searchParams);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      console.log('Search results:', response.data);
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      alert(`–ù–∞–π–¥–µ–Ω–æ ${response.data.movies?.length || 0} —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}"`);
      
    } catch (error) {
      console.error('Search error:', error);
      alert('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsSearching(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setSearchQuery(e.target.value);
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {
    if (e.key === 'Enter') {
      handleSearch(e as any);
    }
  };

  return (
    <Form onSubmit={handleSearch}>
      <InputGroup>
        <Form.Control
          type="text"
          placeholder="–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤..."
          value={searchQuery}
          onChange={handleInputChange}
          onKeyPress={handleKeyPress}
          disabled={isSearching}
          style={{ 
            borderTopRightRadius: 0, 
            borderBottomRightRadius: 0 
          }}
        />
        <Button 
          variant="light" 
          type="submit"
          disabled={isSearching || !searchQuery.trim()}
          style={{ 
            borderTopLeftRadius: 0, 
            borderBottomLeftRadius: 0,
            borderLeft: 'none'
          }}
        >
          {isSearching ? (
            <>
              <span className="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
              –ü–æ–∏—Å–∫...
            </>
          ) : (
            <>
              üîç –ù–∞–π—Ç–∏
            </>
          )}
        </Button>
      </InputGroup>
    </Form>
  );
};

export default SearchBar; 